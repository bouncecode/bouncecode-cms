# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ConfigLogObject {
  createdBy: Float!
  createdDate: DateTime!
  deletedBy: Float!
  deletedDate: DateTime!
  id: Float!
  isPublic: Boolean!
  originId: String!
  payload: JSON
  type: String!
  updatedBy: Float!
  updatedDate: DateTime!
}

input ConfigLogWhereInput {
  originId: String!
}

type ConfigObject {
  createdBy: Float!
  createdDate: DateTime!
  deletedBy: Float!
  deletedDate: DateTime!
  id: String!
  isPublic: Boolean!
  payload: JSON
  type: String!
  updatedBy: Float!
  updatedDate: DateTime!
}

input ConfigUniqueWhereInput {
  id: String!
  isPublic: Boolean!
}

input ConfigUpsertInput {
  id: String!
  isPublic: Boolean!
  payload: JSON
  type: String!
}

input ConfigWhereInput {
  isPublic: Boolean!
  type: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createToken(data: TokenCreateInput!): TokenObject!
  createUser(data: UserCreateInput!): UserObject!
  deleteConfig(where: ConfigUniqueWhereInput!): Boolean!
  deleteUser(where: UserWhereInput!): Boolean!
  refreshToken(refreshToken: String!): TokenObject!
  test(message: String!): TestObject!
  updateUser(data: UserUpdateInput!, where: UserWhereInput!): UserObject!
  upsertConfig(data: ConfigUpsertInput!): ConfigObject!
}

type Query {
  config(where: ConfigUniqueWhereInput!): ConfigObject!
  configLogs(before: Float, take: Float!, where: ConfigLogWhereInput!): [ConfigLogObject!]!
  configs(where: ConfigWhereInput!): [ConfigObject!]!
  me: UserObject!
  test(message: String!): TestObject!
  user(where: UserWhereInput!): UserObject!
  users(skip: Float!, take: Float!, where: UserWhereInput): [UserObject!]!
}

type TestObject {
  message: String!
}

input TokenCreateInput {
  email: String!
  password: String!
}

type TokenObject {
  access_token: String!
  expires_in: Float!
  refresh_token: String!
  token: String!
  token_type: String!
}

input UserCreateInput {
  email: String!
  password: String!
  payload: JSON
}

type UserObject {
  createdDate: DateTime!
  deletedDate: DateTime!
  email: String!
  id: Float!
  isAdmin: Boolean!
  payload: JSON
  updatedDate: DateTime!
}

input UserUpdateInput {
  password: String!
  payload: JSON
}

input UserWhereInput {
  email: String
  id: Float
}
